{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/work/kdt01_nextjs/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n    globalForPrisma.prisma ||\r\n    new PrismaClient({\r\n    log: ['query'],\r\n    });\r\n    \r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,kBAAkB;AAEjB,MAAM,SACT,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACjB,KAAK;QAAC;KAAQ;AACd;AAEJ,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file://C%3A/work/kdt01_nextjs/src/app/api/todos/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nexport async function GET(_: NextRequest, { params }: { params: { id: string } }) {\r\n  // findUnique 하나만 가져오는 거\r\n  const todo = await prisma.todo.findUnique({ where: { id: Number(params.id) } });\r\n\r\n  if (!todo) return NextResponse.json({ message: 'Not found' }, { status: 404 });\r\n\r\n  return NextResponse.json(todo);\r\n}\r\n\r\nexport async function PUT(req: NextRequest, { params }: { params: { id: string } }) {\r\n  const { text, completed } = await req.json();\r\n\r\n  const updated = await prisma.todo.update({\r\n    where: { id: Number(params.id) },\r\n    data: { text, completed },\r\n  });\r\n\r\n  return NextResponse.json(updated);\r\n}\r\n\r\n// PATCH: 일부 필드만 수정할 수 있게 구현\r\nexport async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {\r\n  const { text, completed }: { text?: string; completed?: boolean } = await req.json();\r\n\r\n  // 업데이트할 필드만 조건부로 구성\r\n  const updateData: Record<string, any> = {};\r\n  if (text !== undefined) updateData.text = text;\r\n  if (completed !== undefined) updateData.completed = completed;\r\n\r\n  // 아무 필드도 없으면 에러 응답\r\n  if (Object.keys(updateData).length === 0) {\r\n    return NextResponse.json({ message: 'No fields to update' }, { status: 400 });\r\n  }\r\n\r\n  try {\r\n    const updated = await prisma.todo.update({\r\n      where: { id: Number(params.id) },\r\n      data: updateData,\r\n    });\r\n\r\n    return NextResponse.json(updated);\r\n  } catch (err) {\r\n    return NextResponse.json({ message: 'Todo not found or update failed' }, { status: 404 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {\r\n  const deleted = await prisma.todo.delete({ where: { id: Number(params.id) } });\r\n  return NextResponse.json({ message: 'Deleted', deleted });\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe,IAAI,CAAc,EAAE,EAAE,MAAM,EAA8B;IAC9E,wBAAwB;IACxB,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE,IAAI,OAAO,OAAO,EAAE;QAAE;IAAE;IAE7E,IAAI,CAAC,MAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAY,GAAG;QAAE,QAAQ;IAAI;IAE5E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAEO,eAAe,IAAI,GAAgB,EAAE,EAAE,MAAM,EAA8B;IAChF,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;IAE1C,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,OAAO;YAAE,IAAI,OAAO,OAAO,EAAE;QAAE;QAC/B,MAAM;YAAE;YAAM;QAAU;IAC1B;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe,MAAM,GAAgB,EAAE,EAAE,MAAM,EAA8B;IAClF,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAA2C,MAAM,IAAI,IAAI;IAElF,oBAAoB;IACpB,MAAM,aAAkC,CAAC;IACzC,IAAI,SAAS,WAAW,WAAW,IAAI,GAAG;IAC1C,IAAI,cAAc,WAAW,WAAW,SAAS,GAAG;IAEpD,mBAAmB;IACnB,IAAI,OAAO,IAAI,CAAC,YAAY,MAAM,KAAK,GAAG;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC7E;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,OAAO;gBAAE,IAAI,OAAO,OAAO,EAAE;YAAE;YAC/B,MAAM;QACR;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACF;AAEO,eAAe,OAAO,CAAc,EAAE,EAAE,MAAM,EAA8B;IACjF,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAAE,OAAO;YAAE,IAAI,OAAO,OAAO,EAAE;QAAE;IAAE;IAC5E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAW;IAAQ;AACzD","debugId":null}}]
}